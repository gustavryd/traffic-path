#!/usr/bin/env bash
# Create a new Couchbase collection with basic scaffolding

set -e

# Change to the api directory
cd "$(dirname "$0")/.."

collections_dir=src/backend/couchbase/collections

# Function to echo (can be silenced)
echoh() {
    if [ "${SILENT_OUTPUT:-}" != "true" ]; then
        echo "$@"
    fi
}

# Function to convert kebab-case to snake_case
kebab_to_snake() {
    echo "$1" | sed 's/-/_/g'
}

# Function to convert kebab-case to PascalCase
kebab_to_pascal() {
    local input="$1"
    # Convert hyphens and underscores to spaces, then capitalize each word
    echo "$input" | sed 's/[-_]/ /g' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2))}1' | sed 's/ //g'
}

# Function to convert to uppercase
to_upper() {
    echo "$1" | tr '[:lower:]' '[:upper:]'
}

# Function to create collection file
create_collection_file() {
    local collection_name="$1"
    local snake_name=$(kebab_to_snake "$collection_name")
    local pascal_name=$(kebab_to_pascal "$collection_name")
    local upper_snake=$(to_upper "$snake_name")
    local collection_file="${collections_dir}/${snake_name}.py"

    if [ -f "$collection_file" ]; then
        echoh "📄 Collection file already exists: $collection_file"
        return 1
    fi

    cat > "$collection_file" << EOF
"""
Bindings for working with the '${snake_name}' collection.
"""

from pydantic import BaseModel
from uuid import UUID

from ...clients.couchbase import CouchbaseClient


# The type used for keys in this collection.
_KEY_TYPE = UUID

# The collection name in Couchbase
_COLLECTION_NAME = "${snake_name}"


class ${pascal_name}Doc(BaseModel):
    """Model for ${snake_name} rows."""
    # TODO: Fill this out!
    id: _KEY_TYPE


class ListParams(BaseModel):
    """Supported parameters for ${snake_name} list operations."""
    # Add more params here as needed
    limit: int = 50
    offset: int = 0


class ${pascal_name}Collection:
    """Bindings for working with the '${snake_name}' Couchbase collection"""

    def __init__(self, client: CouchbaseClient):
        self._client = client
        self._collection = None

    ## Utils ##

    async def _get_collection(self):
        """Get the collection handle, creating it if necessary."""
        if not self._collection:
            keyspace = self._client.get_keyspace(_COLLECTION_NAME)
            self._collection = await self._client.get_collection(keyspace)
        return self._collection

    ## Initialization ##

    async def initialize(self):
        """Creates the collection if it doesn't already exist, and stores a handle to it."""
        await self._get_collection()

    ## Operations ##

    async def _get_doc(self, id: _KEY_TYPE) -> dict | None:
        """Retrieves a ${snake_name} doc as a plain dict."""
        await self._get_collection()
        keyspace = self._client.get_keyspace(_COLLECTION_NAME)
        return await self._client.get_document(keyspace, str(id))

    async def get(self, id: _KEY_TYPE) -> ${pascal_name}Doc | None:
        """Retrieves a ${snake_name} doc as a ${pascal_name}Doc."""
        doc = await self._get_doc(id)
        if doc is None:
            return None
        doc['id'] = id
        return ${pascal_name}Doc(**doc)

    async def _list_rows(self, params: ListParams | None = None) -> list[dict]:
        """Retrieves ${snake_name} docs as a list of plain dicts."""
        params = params or ListParams()
        keyspace = self._client.get_keyspace(_COLLECTION_NAME)
        query = self._client.build_list_query(keyspace, limit=params.limit, offset=params.offset)
        return await self._client.query_documents(query)

    async def list(self, params: ListParams | None = None) -> list[${pascal_name}Doc]:
        """Retrieves a list of ${snake_name} docs as ${pascal_name}Doc instances."""
        rows = await self._list_rows(params)
        return [${pascal_name}Doc(**{**row, 'id': row.get('id')}) for row in rows]

    async def delete(self, id: _KEY_TYPE) -> bool:
        """Delete a ${snake_name} doc."""
        keyspace = self._client.get_keyspace(_COLLECTION_NAME)
        return await self._client.delete_document(keyspace, str(id))

    async def upsert(self, doc: ${pascal_name}Doc) -> ${pascal_name}Doc:
        """Insert or update a ${snake_name} doc."""
        keyspace = self._client.get_keyspace(_COLLECTION_NAME)
        await self._client.upsert_document(keyspace, str(doc.id), doc.model_dump(mode='json'))
        return doc
EOF

    echoh "✅ Created collection file: $collection_file"
    return 0
}

# Function to update collections/__init__.py
update_collections_init() {
    local collection_name="$1"
    local snake_name=$(kebab_to_snake "$collection_name")
    local pascal_name=$(kebab_to_pascal "$collection_name")
    local init_file="${collections_dir}/__init__.py"

    # Check if already imported
    if grep -q "from .${snake_name} import ${pascal_name}Collection" "$init_file" 2>/dev/null; then
        echoh "✓ Collection already registered in $init_file"
        return 0
    fi

    # Add import statement
    import_line="from .${snake_name} import ${pascal_name}Collection"

    # Find where to insert the import (after the docstring)
    if grep -q "# Import all collection classes here" "$init_file"; then
        # Add after the comment on a new line
        awk '/# They will be auto-added by the add-couchbase-collection tool/ {print; print "'"$import_line"'"; next} 1' "$init_file" > "${init_file}.tmp" && mv "${init_file}.tmp" "$init_file"
    else
        # Append at the end of imports section
        echo "$import_line" >> "$init_file"
    fi

    # Update COLLECTIONS list
    if grep -q "COLLECTIONS = \[" "$init_file"; then
        # Add to COLLECTIONS list (not as a string, but as a class reference)
        export_entry="    ${pascal_name}Collection,"

        # Add before the closing bracket
        awk -v entry="$export_entry" '/^\]/ {print entry} 1' "$init_file" > "${init_file}.tmp" && mv "${init_file}.tmp" "$init_file"
    fi

    echoh "📝 Registered collection in $init_file"
}

# Function to ensure collections directory and __init__.py exist
ensure_collections_structure() {
    # Create collections directory if it doesn't exist
    if [ ! -d "$collections_dir" ]; then
        mkdir -p "$collections_dir"
        echoh "📁 Created collections directory: $collections_dir"
    fi

    # Create __init__.py if it doesn't exist
    local init_file="${collections_dir}/__init__.py"
    if [ ! -f "$init_file" ]; then
        cat > "$init_file" << 'EOF'
"""
Couchbase collection bindings.

All collection classes should be imported here.
"""
# Import all collection classes here
# They will be auto-added by the add-couchbase-collection tool

# Export all collections
COLLECTIONS = [
]
EOF
        echoh "📄 Created collections __init__.py: $init_file"
    fi
}

# Main script
main() {
    # Parse arguments
    local collection_name=""

    if [[ $# -eq 1 ]]; then
        collection_name="$1"
    else
        echo "Usage: $0 <collection-name>"
        echo ""
        echo "Scaffold bindings for a new Couchbase collection"
        exit 0
    fi

    echoh "📦 Creating Couchbase collection: $collection_name"
    echoh ""

    # Ensure collections directory structure exists
    ensure_collections_structure


    # Convert collection name to snake_case for file paths
    local snake_name=$(kebab_to_snake "$collection_name")
    local pascal_name=$(kebab_to_pascal "$collection_name")

    # Create the collection file
    create_collection_file "$collection_name"

    # Update __init__.py
    update_collections_init "$collection_name"

    echoh ""
    echoh "🎉 Collection created successfully!"
    echoh ""
    echoh "Next steps:"
    echoh "0. READ the generated collection file first to understand the structure:"
    echoh "   ${collections_dir}/${snake_name}.py"
    echoh ""
    echoh "1. Edit the collection file to define your document model:"
    echoh "   ${collections_dir}/${snake_name}.py"
    echoh ""
    echoh "2. Use the collection in your routes or services:"
    echoh "   from backend.collections import ${pascal_name}Collection"
    echoh "   from backend.clients.couchbase import CouchbaseClient"
    echoh ""
    echoh "   # Initialize"
    echoh "   client = CouchbaseClient(config)"
    echoh "   collection = ${pascal_name}Collection(client)"
    echoh "   await collection.init_connection()"
    echoh ""
    echoh "   # Use it"
    echoh "   docs = await collection.list()"
    echoh "   doc = await collection.get(doc_id)"
}

# Run main function
main "$@"
